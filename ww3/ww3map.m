function [varargout]=ww3map(s,rng,popt,fgcolor,bgcolor,ax)
%WW3MAP    Maps WaveWatch III hindcast data
%
%    Usage:    ww3map('file')
%              ww3map('file',rng)
%              ww3map('file',rng,projopt)
%              ww3map('file',rng,projopt,fgcolor,bgcolor)
%              ww3map('file',rng,projopt,fgcolor,bgcolor,ax)
%              ww3map(s,...)
%              ax=ww3map(...)
%
%    Description:
%     WW3MAP('FILE') maps the WaveWatch III hindcast data contained in the
%     GRiB or GRiB2 file FILE averaged across all the records (basically
%     showing the average for the time span of the data in the GRiB file).
%     One map per data type (this only matters for wind which means the u/v
%     components are drawn seperately).  If no filename is given a GUI is
%     presented for the user to select a WW3 hindcast file.
%
%     WW3MAP('FILE',RNG) sets the colormap limits of the data. The default
%     is [0 15] which works well for significant wave heights.  A scale of
%     [0 25] will prevent saturation of wave heights & periods.
%
%     WW3MAP('FILE',RNG,PROJOPT) allows passing options to M_PROJ.  See
%     M_PROJ('SET') for possible projections and See M_PROJ('GET',PROJ) for
%     a list of possible additional options specific to that projection.
%
%     WW3MAP('FILE',RNG,PROJOPT,FGCOLOR,BGCOLOR) specifies foreground and
%     background colors of the map.  The default is 'w' for FGCOLOR & 'k'
%     for BGCOLOR.  Note that if one is specified and the other is not, an
%     opposing color is found using INVERTCOLOR.  The color scale is also
%     changed so the noise clip is at BGCOLOR.
%
%     WW3MAP('FILE',RNG,PROJOPT,FGCOLOR,BGCOLOR,AX) sets the axes to draw
%     in.  This is useful for subplots, guis, etc.  AX must have the same
%     number of elements as S.DATA (as in one plot per data type).  The
%     default creates a new figure.
%
%     WW3MAP(S,...) plots the WaveWatch III data contained in the
%     structure S created by WW3STRUCT.  The plots average the data across
%     all records for each data type.
%
%     AX=WW3MAP(...) returns the axes drawn in.
%
%    Notes:
%     - Requires that the njtbx toolbox is installed!
%
%    Examples:
%     % Read the first record of a NOAA WW3 grib file and map it:
%     s=ww3struct('nww3.hs.200607.grb',1);
%     ax=ww3map(s);
%
%    See also: WW3STRUCT, WW3MAPMOV, PLOTWW3, WW3MOV, WW3REC

%     Version History:
%        May   5, 2012 - initial version
%        Sep.  5, 2012 - set nan=0 for ice
%
%     Written by Garrett Euler (ggeuler at wustl dot edu)
%     Last Updated Sep.  5, 2012 at 00:40 GMT

% todo:

% check nargin
error(nargchk(0,6,nargin));

% check ww3 struct
valid={'path' 'name' 'description' 'units' 'data' ...
    'lat' 'lon' 'time' 'latstep' 'lonstep' 'timestep'};
if(nargin==0)
    s=ww3struct();
    if(~isscalar(s))
        error('seizmo:ww3map:badWW3',...
            'PLOTWW3 can only handle 1 file!');
    end
elseif(isstruct(s))
    if(~isscalar(s) || any(~ismember(valid,fieldnames(s))))
        error('seizmo:ww3map:badWW3',...
            'S must be a scalar struct generated by WW3STRUCT!');
    end
elseif(ischar(s))
    s=ww3struct(s);
else
    error('seizmo:ww3map:badWW3',...
        'FILE must be a string!');
end

% default/check color limits
if(nargin==1 || isempty(rng)); rng=[0 15]; end
if(~isreal(rng) || ~isequal(size(rng),[1 2]) || rng(1)>rng(2))
    error('seizmo:ww3map:badRNG',...
        'RNG must be a real-valued 2 element vector as [low high]!');
end

% access to m_map globals for map boundaries
global MAP_VAR_LIST

% account for pcolor difference (cell => grid pixel registration)
latstep=s.lat(2)-s.lat(1);
lonstep=s.lon(2)-s.lon(1);
s.lat=[s.lat(:)-latstep/2; s.lat(end)+latstep/2];
s.lon=[s.lon(:)'-lonstep/2 s.lon(end)+lonstep/2];

% get max/min lat/lon of map & stations
minlat=min(s.lat); maxlat=max(s.lat);
minlon=min(s.lon); maxlon=max(s.lon);

% default/check projection options
if(nargin<3 || isempty(popt))
    popt={'robinson','lat',[minlat maxlat],'lon',[minlon maxlon]};
end
if(ischar(popt)); popt=cellstr(popt); end
if(~iscell(popt))
    error('seizmo:ww3map:badInput',...
        'PROJOPT must be a cell array of args for M_PROJ!');
end

% default/check colors
if(nargin<4)
    fgcolor='w'; bgcolor='k';
elseif(nargin<5)
    if(isempty(fgcolor))
        fgcolor='w'; bgcolor='k';
    else
        bgcolor=invertcolor(fgcolor,true);
    end
else
    if(isempty(fgcolor))
        if(isempty(bgcolor))
            fgcolor='w'; bgcolor='k';
        else
            fgcolor=invertcolor(bgcolor,true);
        end
    elseif(isempty(bgcolor))
        bgcolor=invertcolor(fgcolor,true);
    end
end

% change char to something rgb
if(ischar(fgcolor)); fgcolor=name2rgb(fgcolor); end
if(ischar(bgcolor)); bgcolor=name2rgb(bgcolor); end

% default/check axes handles
if(nargin<6 || isempty(ax) || numel(ax)~=numel(s.data) ...
        || any(~ishghandle(ax,'axes')))
    makeaxes=true;
    ax=nan(numel(s.data),1);
else
    makeaxes=false;
end

% time string
if(numel(s.time)==1)
    tstring=datestr(s.time,31);
else % >1
    tstring=[datestr(min(s.time),31) ' to ' datestr(max(s.time),31)];
end

% loop over data types
for i=1:numel(s.data)
    % average data (convert nan to 0 to handle ice)
    s.data{i}(isnan(s.data{i}))=0;
    if(size(s.data{i},3)>1)
        s.data{i}=mean(s.data{i},3);
    end
    
    % create plot
    if(makeaxes)
        fh=figure('color',bgcolor,'defaulttextcolor',fgcolor,...
            'defaultaxesxcolor',fgcolor);
        ax(i)=axes('parent',fh);
    end
    
    % map colors & coast/border res
    ocean=bgcolor;
    %land=fgcolor;
    land=[0.4 0.6 0.2];
    
    % expand image by 1 row/col for cell => grid pixel registration
    s.data{i}=s.data{i}([1:end end],[1:end end]);
    
    % setup projection
    m_proj(popt{:});
    set(ax(i),'color',ocean);
    
    % plot ww3 image
    hold(ax(i),'on');
    if(any(s.lon>MAP_VAR_LIST.longs(1) & s.lon<MAP_VAR_LIST.longs(2)))
        m_pcolor(s.lon,s.lat,s.data{i},'parent',ax(i));
    end
    if(any(s.lon-360>MAP_VAR_LIST.longs(1) ...
            & s.lon-360<MAP_VAR_LIST.longs(2)))
        m_pcolor(s.lon-360,s.lat,s.data{i},'parent',ax(i));
    end
    if(any(s.lon+360>MAP_VAR_LIST.longs(1) ...
            & s.lon+360<MAP_VAR_LIST.longs(2)))
        m_pcolor(s.lon+360,s.lat,s.data{i},'parent',ax(i));
    end
    
    % modify
    shading(ax(i),'flat');
    if(strcmp(bgcolor,'w') || isequal(bgcolor,[1 1 1]))
        colormap(ax(i),flipud(fire));
    elseif(strcmp(bgcolor,'k') || isequal(bgcolor,[0 0 0]))
        colormap(ax(i),fire);
    else
        if(ischar(bgcolor))
            bgcolor=name2rgb(bgcolor);
        end
        hsv=rgb2hsv(bgcolor);
        colormap(ax(i),hsvcustom(hsv));
    end
    set(ax(i),'clim',rng);
    hold(ax(i),'off');
    
    % now add coastlines and grid
    axes(ax(i));
    m_coast('patch',land);
    m_grid('color',fgcolor,'xtick',[],'ytick',[]);
    
    % hackery to color oceans at large when the above fails
    set(findobj(ax(i),'tag','m_grid_color'),'facecolor',ocean);
    
    % labeling
    title(ax(i),...
        {'NOAA WaveWatch III Hindcast' s.description{i} tstring},...
        'fontweight','bold','color',fgcolor);
    
    % colorbar
    c=colorbar('eastoutside','peer',ax(i),...
        'fontweight','bold','xcolor',fgcolor,'ycolor',fgcolor);
    xlabel(c,s.units{i},'fontweight','bold','color',fgcolor)
    axis(ax(i),'equal','tight');
end

% tag plots
set(ax,'createfcn','ww3map');

% output if wanted
if(nargout); varargout{1}=ax; end

end
